â˜… WEB3

JavaScript library from the Ethereum Foundation.

If we do not use Web3.js, we will write send information request to a Ethereum node in this way:
{"jsonrpc":"2.0","method":"eth_sendTransaction",
    "params":[{"from":"0xb60e8dd61c5d32be8058bb8eb970870f07233155","to":"0xd46e8dd67c5d32be8058bb8eb970870f07244567",
    "gas":"0x76c0","gasPrice":"0x9184e72a000","value":"0x9184e72a",
    "data":"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"}],"id":1}

But thanks to Web3, the above query can be simplified like this:
CryptoZombies.methods.createRandomZombie("Vitalik Nakamoto ðŸ¤”").send({ from: "0xb60e8dd61c5d32be8058bb8eb970870f07233155", 
    gas: "3000000" })

â˜… To use the Web3: 
    Go to root of the project on CMD any type "npm install web3". You need to have node.js already installed on your computer.

OR on your index.html, add this:
<script language="javascript" type="text/javascript" src="web3.min.js"></script>

To access Ethereum nodes, you can use Infura company services. Not sure if I understand this step much.

â˜… Then add metamask related code to your index.html

â˜… Then we will need to add the contract address and contract ABI to our index.html
we will get contract once we deploy it to Ethereum.
ABI: Application Binary Interface is a file that contains the functions of our contracts. It is in JSON format. ABI tells
web3 how to interact with our contract functions. We get this ABI code, once we deploy our contract to Ethereum mainnet. 
The solidity compiler will provide us this code. We will then copy it and save it in a file with ".js" extension. 
Then include it in your index.html 

â˜… CALL and SEND FUNCTIONS 

call is used for view and pure functions. It only runs on the local node, and won't create a transaction on the blockchain.
myContract.methods.myMethod(123).call()

send will create a transaction and change data on the blockchain. You'll need to use send for any functions that aren't view or pure.
    example: myContract.methods.myMethod(123).send()

MORE ON SEND FUNCTION:
There will be a significant delay from when the user sends a transaction and when that transaction 
actually takes effect on the blockchain. This is because we have to wait for the transaction to be 
included in a block, and the block time for Ethereum is on average 15 seconds. If there are a lot of 
pending transactions on Ethereum or if the user sends too low of a gas price, our transaction may 
have to wait several blocks to get included, and this could take minutes.

So, we will use two more functions with send(): receipt() and error()
receipt will fire when the transaction is included into a block on Ethereum, which means our zombie 
has been created and saved on our contract error will fire if there's an issue that prevented the 
transaction from being included in a block, such as the user not sending enough gas. 
We'll want to inform the user in our UI that the transaction didn't go through so they can try again.

EXAMPLE ON INDEX.HTML:

function getZombieDetails(id) {
  return cryptoZombies.methods.zombies(id).call()
}

// Call the function and do something with the result:
getZombieDetails(15)
.then(function(result) {
  console.log("Zombie 15: " + JSON.stringify(result));
});

cryptoZombies.methods.zombies(id).call() will communicate with the Web3 provider node and tell it 
to return the zombie with index id from Zombie[] public zombies on our contract. As our zombies mapping is public
we can use it like a function (..."zombies(id)"...)

Note that this is asynchronous, like an API call to an external server. So Web3 returns a promise here.

Once the promise resolves (which means we got an answer back from the web3 provider), our example code
 continues with the then statement, which logs result to the console.

â˜… â˜… â˜… â˜… 
EVENTS
To return event values, you can follow an example like this:

cryptoZombies.events.NewZombie()
.on("data", function(event) {
  let zombie = event.returnValues;
  // We can access this event's 3 return values on the `event.returnValues` object:
  console.log("A new zombie was born!", zombie.zombieId, zombie.name, zombie.dna);
}).on("error", console.error);

In order to filter events and only listen for changes related to the current user, 
our Solidity contract would have to use the indexed keyword.
In this case, because _from and _to are indexed, that means we can filter for them
 in our event listener in our front end:
// Use `filter` to only fire this code when `_to` equals `userAccount`
cryptoZombies.events.Transfer({ filter: { _to: userAccount } })
.on("data", function(event) {
  let data = event.returnValues;
  // The current user just received a zombie!
  // Do something here to update the UI to show it
}).on("error", console.error);

