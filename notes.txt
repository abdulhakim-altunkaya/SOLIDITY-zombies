â˜… pragma version means solidity compiler version 

â˜… state variables are stored on the contract storage. Which means they are written to Ethereum blockchain. 

â˜… uint = uint256 (256 bit unsigned integer)
2 ** 5 means 2 to the power of 5 which means 2*2*2*2*2

structs allow us to create more complex data types that can have multiple properties.
Creating a struct array is useful, it will act like a database on the blockchain. 

strings : arbitrary-length UTF-8 data.

â˜… Function parameter variable names start with "_" as a convention. 
private function names also start with "_" as a convention. 


â˜… 
PURE: functions do not read and change any data on the blockchain. 
VIEW: functions read data from the blockchain but do not change it. 
pure and view functions dont cost gas if they are called externally but they will cost gas 
if they are called internally by another function (I am not sure if I understood this part)

â˜… keccak256 hashing function converts the input to a random 256 bit hexadecimal number. It expects
a "bytes" data type input. For this reason we need to encode other data types.
keccak256 can be used for cryptography and also for (almost)random number generation. 

â˜… " array.push() - 1; " returns length of the array of minus-1.
It is the same as " array.length-1; "
uint someIndex = myArray.push("apple") -1; //This will return the index number of the apple, as it is the last element.

â˜… 
THE ADDRESS OF AN ACCOUNT (IN ETHEREUM):
Ethereum account = Bank account.
Ethereum address = Bank account number
Addresses are owned by users or smart contracts.

â˜… 
external    : NO main contract - YES inheriting+other contract
public      : YES main+inheriting contract  - YES other contract
internal    : YES main+inheriting contract - NO other contract
private     : YES main contract - NO inheriting+other contract

â˜… INTERFACE: If we want to read data from a contract that we do not own (which we cannot inherit from), we can use interface.

â˜… In Javascript a function can return only one value, In solidity a function can return multiple values.

â˜… GAS
The creators of Ethereum wanted to make sure someone couldn't clog up the network with an infinite loop, 
or hog all the network resources with really intensive computations. 
So they made it so transactions aren't free, and users have to pay for computation time as well as storage.

Normally there's no benefit to using these sub-types because Solidity reserves 256 bits of storage regardless of the uint size. 
For example, using uint8 instead of uint (uint256) won't save you any gas. But there's an exception to this: inside structs.
If you have multiple uints inside a struct, using a smaller-sized uint when possible will allow Solidity to pack 
these variables together to take up less storage. 

You'll also want to cluster identical data types together (i.e. put them next to each other in the struct) 
so that Solidity can minimize the required storage space. 

â˜…NATIVE UNITS
block.timestamp : returns current timestamp
1 minutes       : 60
1 hours         : 3600
1 days          : 86400

uint8 = 255 max in decimal, and 11111111 in binary
uint16 = 65535 max in decimal

HakÄ±m lÄ±kes hÄ±s flower Ruta but sometÄ±mes he Ä±s a donkey. 
But he lÄ±kes her a lotÃ§ You all should know Ä±t. Dont dÄ±stur me. Now I am Ä±n LÄ±thuanÄ±a. And I love my flower a lot. 

â˜… calldata is similar to memory but it is only available to external functions. 

â˜… memory arrays must be created with a length argument: uint[] memory values = new uint[](3);

â˜… When you call an API function on a normal web server, you can't send US dollars along with your function call.

But in Ethereum, because both the money (Ether), the data (transaction payload), and the contract code itself all live on Ethereum, 
it's possible for you to call a function and pay money to the contract at the same time.

â˜… OVERFLOWING and UNDEFLOW AND SAFEMATH
Numbers in Solidity can overflow because they have limits.

uint8 myNumber = 255;
myNumber++;
uint8 can be max 255 in decimal and 11111111 in binary. So if you add "1" to "255", instead of giving error,
it will return to "0". In other words, If you add more to 11111111 it will reset to 00000000.

uint8 myNumber = 0;
myNumber--;
The same logic as above. this time the number will reset to 255.
it will return to "0". In other words, If you add more to 11111111 it will reset to 00000000.

To overcome this issue, we can use a library called "Safemath" developed by OpenZeppelin. 
A library is a special type of contract in Solidity. One of the things it is useful for is to attach functions to native data types.
SafeMath library is by default for uint256. If you want to use SafeMath for uint8, uint16 etc, then also import relevant SafeMath library.

import "./safemath.sol";
contract A {
    using SafeMath for uint256;
    using SafeMath16 for uint16;
}

Inside the imported safemath contract, there are two libraries: SafeMath and SafeMath16. You can expand this file as much as you want.


â˜…  BURNING A TOKEN:...to make sure users don't accidentally transfer their zombies to 
address 0 (which is called "burning" a token â€” basically  it's sent to an address that no 
one has the private key of, essentially making it unrecoverable).

â˜…  NATSPEC COMMENTING CONVENTION

@notice explains to a user what the contract / function does. @dev is for explaining extra details to developers.

@param and @return are for describing what each parameter and return value of a function are for.
/// @title A contract for basic math operations
/// @author H4XF13LD MORRIS ðŸ’¯ðŸ’¯ðŸ˜ŽðŸ’¯ðŸ’¯
/// @notice For now, this contract just adds a multiply function
contract Math {
  /// @notice Multiplies 2 numbers together
  /// @param x the first uint.
  /// @param y the second uint.
  /// @return z the product of (x * y)
  /// @dev This function does not currently check for overflows
  function multiply(uint x, uint y) returns (uint z) {
    // This is just a normal comment, and won't get picked up by natspec
    z = x * y;
  }
}



â˜… 